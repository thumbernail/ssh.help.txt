/**
 * Multiplay SDK Daemon Game Server API
 * The game server API is called by the Multiplay Game Server SDK itself to subscribe to events and report server status.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIPayloadApi.h"

#include "OpenAPIPayloadAllocationErrorResponseBody.h"
#include "OpenAPIPayloadTokenResponseBody.h"

namespace Multiplay
{

/* Retrieve an allocation&#39;s payload
 *
 * Retrieves the payload associated to a specific allocation
*/
class MULTIPLAYGAMESERVERSDK_API PayloadAllocationRequest : public Request
{
public:
    virtual ~PayloadAllocationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* ID of the game server allocation */
	FGuid AllocationId;
};

class MULTIPLAYGAMESERVERSDK_API PayloadAllocationResponse : public Response
{
public:
    virtual ~PayloadAllocationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Retrieve a JWT token for payloads
 *
 * Retrieves the JWT token associated to a specific allocation&#39;s fleet
*/
class MULTIPLAYGAMESERVERSDK_API PayloadTokenRequest : public Request
{
public:
    virtual ~PayloadTokenRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class MULTIPLAYGAMESERVERSDK_API PayloadTokenResponse : public Response
{
public:
    virtual ~PayloadTokenResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPayloadTokenResponseBody Content;
};

}
