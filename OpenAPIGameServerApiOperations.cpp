/**
 * Multiplay SDK Daemon Game Server API
 * The game server API is called by the Multiplay Game Server SDK itself to subscribe to events and report server status.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGameServerApiOperations.h"

#include "MultiplayGameServerSDKModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace Multiplay
{

FString ReadyServerRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("serverId"), ToStringFormatArg(ServerId) },
	{ TEXT("allocationId"), ToStringFormatArg(AllocationId) } };

	FString Path = FString::Format(TEXT("/v1/server/{serverId}/allocation/{allocationId}/ready-for-players"), PathParams);

	return Path;
}

void ReadyServerRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json"), TEXT("application/problem+json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<TCHAR, TCondensedJsonPrintPolicy<TCHAR>>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else if (Consumes.Num() == 0)
	{
		// Do nothing.
	}
	else
	{
		UE_LOG(LogMultiplayGameServerSDK, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ReadyServerResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response returned when a server has been marked as ready to receive players"));
		break;
	case 404:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	case 500:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	}
}

bool ReadyServerResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SubscribeServerRequest::ComputePath() const
{
	FString Path(TEXT("/v1/connection/websocket"));
	return Path;
}

void SubscribeServerRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/problem+json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Connection"), Connection);
	HttpRequest->SetHeader(TEXT("Upgrade"), Upgrade);

	// Default to Json Body request
	if (Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<TCHAR, TCondensedJsonPrintPolicy<TCHAR>>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else if (Consumes.Num() == 0)
	{
		// Do nothing.
	}
	else
	{
		UE_LOG(LogMultiplayGameServerSDK, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SubscribeServerResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 101:
		SetResponseString(TEXT("Returned when upgrading to a websocket connection for server events"));
		break;
	case 400:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	case 404:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	case 500:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	}
}

bool SubscribeServerResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString UnreadyServerRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("serverId"), ToStringFormatArg(ServerId) } };

	FString Path = FString::Format(TEXT("/v1/server/{serverId}/unready"), PathParams);

	return Path;
}

void UnreadyServerRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json"), TEXT("application/problem+json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<TCHAR, TCondensedJsonPrintPolicy<TCHAR>>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else if (Consumes.Num() == 0)
	{
		// Do nothing.
	}
	else
	{
		UE_LOG(LogMultiplayGameServerSDK, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void UnreadyServerResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response returned when a server has been marked as unready to receive players"));
		break;
	case 404:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	case 500:
		SetResponseString(TEXT("RFC7807 response returned in the event of an error."));
		break;
	}
}

bool UnreadyServerResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
